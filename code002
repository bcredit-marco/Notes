public static class Log
    {
        static Log()
        {
            //log4net.Core.LoggerManager.GetAllRepositories();
            XmlConfigurator.Configure();
            //log4net.Repository.ILoggerRepository[] aux = log4net.Core.LoggerManager.GetAllRepositories();
            //IAppender[] lista = aux[0].GetAppenders();
            //foreach (IAppender appender in lista)
            //{
            //    if (appender.Name == "AdoNetAppender")
            //    {

            //    }
            //}
            //   log4net.Appender.AdoNetAppender jjas = log4net.Appender.AdoNetAppender;

        }

        /// <summary>
        /// Level DEBUG a grabar en el log
        /// </summary>
        /// <param name="message">Mensaje a grabar en el log</param>
        public static void Debug(string message)
        { 
            MethodBase methodo = new StackTrace().GetFrame(1).GetMethod();
            ILog Logger = LogManager.GetLogger(methodo.Module.Name);
            string nombreMetodo = methodo.Name;
            string nombreClase = methodo.DeclaringType.Name;
            Logger.Debug( nombreClase + "." + nombreMetodo + "." + message);
        }

        /// <summary>
        /// Level ERROR a grabar en el log
        /// </summary>
        /// <param name="message">Mensaje a grabar en el log</param>
        /// <param name="ex">Exception capturada para grabar, se puede enviar null</param>
        public static void Error(string message, Exception ex)
        {
            MethodBase methodo = new StackTrace().GetFrame(1).GetMethod();
            ILog Logger = LogManager.GetLogger(methodo.Module.Name);
            string nombreMetodo = methodo.Name;
            string nombreClase = methodo.DeclaringType.Name;
            Logger.Error(nombreClase + "." + nombreMetodo + "." + message, ex);
        }

        /// <summary>
        /// Level Fatal a grabar en el log
        /// </summary>
        /// <param name="message">Mensaje a grabar en el log</param>
        /// <param name="ex">Exception capturada para grabar, se puede enviar null</param>
        public static void Fatal(string message, Exception ex)
        {
            MethodBase methodo = new StackTrace().GetFrame(1).GetMethod();
            ILog Logger = LogManager.GetLogger(methodo.Module.Name);
            string nombreMetodo = methodo.Name;
            string nombreClase = methodo.DeclaringType.Name;
            Logger.Fatal(nombreClase + "." + nombreMetodo + "." + message, ex);
        }

        /// <summary>
        /// Level Warn (peligro) a grabar en el log
        /// </summary>
        /// <param name="message">Mensaje a grabar en el log</param>
        /// <param name="ex">Exception capturada para grabar, se puede enviar null</param>
        public static void Warn(string message, Exception ex)
        {
            MethodBase methodo = new StackTrace().GetFrame(1).GetMethod();
            ILog Logger = LogManager.GetLogger(methodo.Module.Name);
            string nombreMetodo = methodo.Name;
            string nombreClase = methodo.DeclaringType.Name;
            Logger.Warn(nombreClase + "." + nombreMetodo + "." + message, ex);
        }

        /// <summary>
        /// Level Info (informativo) a grabar en el log
        /// </summary>
        /// <param name="message">Mensaje a grabar en el log</param>
        public static void Info(string message)
        {
            MethodBase methodo = new StackTrace().GetFrame(1).GetMethod();
            ILog Logger = LogManager.GetLogger(methodo.Module.Name);
            string nombreMetodo = methodo.Name;
            string nombreClase = methodo.DeclaringType.Name;
            Logger.Info( nombreClase + "." + nombreMetodo + "." + message);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public SPWB_GET_PERMISOS_USUARIO_Result GetObjUsuarioByMatriculaAplicativo(string strMatricula, string strAplicativo)
        {
            Log.Info("");
            try
            {
                Log.Debug("");
                var context = new BD_CRSCLIC_PERSONAS_ENTITIES();
                SPWB_GET_PERMISOS_USUARIO_Result result = context.SPWB_GET_PERMISOS_USUARIO(strMatricula, strAplicativo)
                    .Select(ocUsuarios => ocUsuarios).FirstOrDefault();

                return result ?? new SPWB_GET_PERMISOS_USUARIO_Result();
            }
            catch (Exception ex)
            {
                Log.Error("",ex);
                throw;
            }
            Log.Info("");
            return null;
           
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
            [ServiceContract(Namespace = "")]
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class PrincipalRest
    {
        // To use HTTP GET, add [WebGet] attribute. (Default ResponseFormat is WebMessageFormat.Json)
        // To create an operation that returns XML,
        //     add [WebGet(ResponseFormat=WebMessageFormat.Xml)],
        //     and include the following line in the operation body:
        //         WebOperationContext.Current.OutgoingResponse.ContentType = "text/xml";
        [OperationContract]
        public void DoWork()
        {
            // Add your operation implementation here
            return;
        }

        [WebGet(UriTemplate = "test/{hash}/{app}")]
        public string RetrieveUserInformation(string hash, string app)
        {
            return hash + " - " + app;
        }
        // Add more operations here and mark them with [OperationContract]
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public class ConsumoCarga 
    {
        #region Constructor AccionServicio

        private readonly IEntidadesTipoProducto _repositorioTipoProducto;
        private readonly IEntidadesRelacionProductoTabla _repositorioRelacionProductoTabla;
        private readonly IEntidadesColumnas _repositorioColumnas;

        public ConsumoCarga()
        {
            var dbContext = new BD_CRSCLIC_RECEPTOR_ENTITIES();
            _repositorioTipoProducto = new CManejadorTipoProducto(dbContext);
            _repositorioRelacionProductoTabla = new CManejadorRelacionProductoTabla(dbContext);
            _repositorioColumnas = new CManejadorColumnas(dbContext);
        }

        #endregion

        public List<TIPO_PRODUCTO> GetListTipoProductoActivo(bool bolActivo)
        {
            return _repositorioTipoProducto.GetListTipoProductoActivo(bolActivo);
        }

    
